name: CD

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Navigate to app directory
            cd /opt/shopify-headless

            # Pull latest changes
            git pull origin main

            # Update environment variables
            echo "Updating environment variables..."
            echo "NODE_ENV=production" > .env
            echo "PORT=3000" >> .env
            echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
            echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "SHOPIFY_SHOP_NAME=${{ secrets.SHOPIFY_SHOP_NAME }}" >> .env
            echo "SHOPIFY_ACCESS_TOKEN=${{ secrets.SHOPIFY_ACCESS_TOKEN }}" >> .env
            echo "SHOPIFY_STOREFRONT_TOKEN=${{ secrets.SHOPIFY_STOREFRONT_TOKEN }}" >> .env
            echo "SHOPIFY_WEBHOOK_SECRET=${{ secrets.SHOPIFY_WEBHOOK_SECRET }}" >> .env
            echo "SEGMENT_WRITE_KEY=${{ secrets.SEGMENT_WRITE_KEY }}" >> .env

            # Pull latest Docker images
            echo "Pulling latest Docker images..."
            docker compose pull

            # Update Docker containers
            echo "Updating Docker containers..."
            docker compose up -d --remove-orphans

            # Clean up old images
            echo "Cleaning up old images..."
            docker image prune -f

            # Verify deployment
            echo "Verifying deployment..."
            docker compose ps
            
            # Check application health
            echo "Checking application health..."
            curl -f http://localhost:3000/api/health || exit 1

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.deploy.result == 'success' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "✅ Deployment to production successful!"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify failure
        if: ${{ needs.deploy.result == 'failure' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "❌ Deployment to production failed!"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 